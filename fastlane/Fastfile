# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/docs
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane
require 'yaml'

# This is the minimum version number required.
# Update this, if you use features of a newer version

# INSTRUCTIONS
# RUN: fastlane send patch:false

fastlane_version "1.80.0"

default_platform :ios



platform :ios do

  # Store the current CFBundleVersion and CFBundleShortVersionString in the fastlane context before every lane.
  before_all do
    ENV["SLACK_URL"] = "https://hooks.slack.com/services/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"
  end

  desc "Runs all the tests"
  lane :test do
    scan
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :deploy do |options|
    # Increase the app version number
    patch = options[:patch] # Bool
    minor = options[:minor] # Bool
    major = options[:major] # Bool
    testflight = options[:testflight] # Bool
    appstore = options[:appstore] # Bool

    # A increment_version_number is required, force patch if needed
    if release && !patch && !minor && !major
      patch = true
    end

    #ensure_git_status_clean
    build_number = increment_build_number({
      build_number: latest_testflight_build_number + 1
    })

    # Generate release notes from CHANGELOG
    changelog_filename = '../CHANGELOG.yml'
    changelog_yaml = YAML.load_file(changelog_filename)
    release_notes = changelog_yaml['upcoming'].map{ |note| note.prepend '- ' }.join("\n")

    version = get_aozora_version_number
    if patch || minor || major
      if patch
        version = increment_version_number(bump_type: "patch")
      elsif minor
        version = increment_version_number(bump_type: "minor")
      elsif major
        version = increment_version_number(bump_type: "major")
      end

      # Add a changelog entry for this version, 
      # yes, there is a reason for the EOS content to be on the left.
      changelog_contents = File.read(changelog_filename)
      existing_releases = changelog_contents.split('releases:').last
      this_release = changelog_yaml['upcoming'].map{ |note| note.prepend '  ' }.join("\n")
      changelog_contents = <<-EOS
upcoming:

releases:
- version: #{version}
  date: #{Time.new.strftime("%B %d %Y")}
  notes:
#{this_release}
#{existing_releases}
EOS

      File.open(changelog_filename, 'w') { |file| file.puts changelog_contents }
    end

    # Get fresh certificates
    sigh

    #match(type: "appstore") # more information: https://codesigning.guide
    gym(scheme: "Aozora") # Build your app - more options available
    
    # Set this environment if you're behind a firewall, used by deliver and pilot
    ENV["DELIVER_ITMSTRANSPORTER_ADDITIONAL_UPLOAD_PARAMETERS"] = "-t DAV"

    # Send AppStore udpate
    if appstore
      deliver
    end

    if testflight
      slack(
        message: "New Aozora build #{version}(#{build_number}) incoming :tanabata_tree::rocket:",
        default_payloads: [],
        payload: {
          "Release Notes" => release_notes
        }
      )

      # Send to TestFlight and distribute!
      pilot(distribute_external: true, changelog: release_notes)
    end

    clean_build_artifacts

    # Can't use commit_version_bump to include changelog changes
    sh "git add .. ; git commit -m 'Deploying version #{version}(#{build_number}).'" 

    if patch || minor || major
      add_git_tag
    end
    push_to_git_remote

    if testflight
      slack(
        message: "New Aozora build #{version}(#{build_number}) is out! :rocket:,\n if you haven't already read the beta wiki: https://goo.gl/SUC2oO",
      )
    end

  end
  # You can define as many lanes as you want

  after_all do |lane|
    # This block is called, only if the executed lane was successful

    # slack(
    #   message: "Successfully deployed new App Update."
    # )
  end

  error do |lane, exception|
    # slack(
    #   message: exception.message,
    #   success: false
    # )
    puts "Unable to deploy, resetting git repository."
    clean_build_artifacts
    reset_git_repo
  end
end


# More information about multiple platforms in fastlane: https://github.com/fastlane/fastlane/blob/master/docs/Platforms.md
# All available actions: https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Actions.md

# fastlane reports which actions are used
# No personal data is recorded. Learn more at https://github.com/fastlane/enhancer

def get_aozora_version_number
  `/usr/libexec/PlistBuddy -c 'Print CFBundleShortVersionString' ../AnimeNow/Info.plist`.strip
end

def get_anime_trakr_version_number
  `/usr/libexec/PlistBuddy -c 'Print CFBundleShortVersionString' ../AnimeTrakr-Info.plist`.strip
end
